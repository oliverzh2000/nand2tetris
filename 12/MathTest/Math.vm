function Math.init 0
push constant 16
call Array.new 1
pop static 0
push constant 16
call Array.new 1
pop static 1
push static 0
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 15
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.multiply 2
push constant 0
pop local 1
label $WHILE.START.0
push local 1
push constant 16
lt
not
if-goto $WHILE.END.0
push argument 1
push static 0
push local 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
not
if-goto $IF.FALSE.1
push local 0
push argument 0
add
pop local 0
label $IF.FALSE.1
push argument 0
push argument 0
add
pop argument 0
push local 1
push constant 1
add
pop local 1
goto $WHILE.START.0
label $WHILE.END.0
push local 0
return
function Math.divide 2
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
not
if-goto $IF.FALSE.2
push argument 0
neg
push argument 1
call Math.divide 2
neg
return
label $IF.FALSE.2
push argument 1
push constant 0
lt
push argument 0
push constant 0
gt
and
not
if-goto $IF.FALSE.3
push argument 0
push argument 1
neg
call Math.divide 2
neg
return
label $IF.FALSE.3
push argument 1
push argument 0
gt
not
if-goto $IF.FALSE.4
push constant 0
return
label $IF.FALSE.4
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 1
push argument 0
push constant 2
push local 1
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto $IF.FALSE.5
push local 1
push local 1
add
return
goto $IF.END.5
label $IF.FALSE.5
push local 1
push local 1
add
push constant 1
add
return
label $IF.END.5
function Math.sqrt 3
push constant 7
pop local 0
push constant 0
pop local 1
label $WHILE.START.6
push local 0
push constant 0
lt
not
not
if-goto $WHILE.END.6
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
add
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
add
call Math.multiply 2
pop local 2
push local 2
push argument 0
gt
not
push local 2
push constant 0
gt
and
not
if-goto $IF.FALSE.7
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
add
pop local 1
label $IF.FALSE.7
push local 0
push constant 1
sub
pop local 0
goto $WHILE.START.6
label $WHILE.END.6
push local 1
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto $IF.FALSE.8
push argument 0
neg
return
label $IF.FALSE.8
push argument 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto $IF.FALSE.9
push argument 0
return
label $IF.FALSE.9
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto $IF.FALSE.10
push argument 0
return
label $IF.FALSE.10
push argument 1
return