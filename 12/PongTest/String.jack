// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int index, maxLen;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
           let maxLength = 1;
        }
        let index = 0;
        let maxLen = maxLength;
        let chars = Array.new(maxLength);
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do chars.dispose();
        return;
    }


    /** Returns the current length of this string. */
    method int length() {
        return index;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(index < maxLen) {
            let chars[index] = c;
            let index = index + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(index > 0){
            let index = index - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, intValue;
        var boolean isNeg;

        let i = 0;
        if (chars[i] = 45) {
            let isNeg = true;
            let i = i + 1;
        }
        while (i < maxLen) {
            let intValue = (intValue * 10) +  chars[i] - 48;
            let i = i + 1;
        }
        if (isNeg) {
            let intValue = -intValue;
        }
        return intValue;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let index = 0;  // Reset the string first.

        if (val < 0) {
            let val = -val;
            do appendChar(45);  // "-".
        }
        return setIntBody(val);
    }

    method void setIntBody(int val) {
        var int lastDigit;

        let lastDigit = val - ((val / 10) * 10);  // lastDigit = val % 10.
        if (10 > val) {
            do appendChar(val + 48);
        }
        else {
            do setIntBody(val / 10);
            do appendChar(lastDigit + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
